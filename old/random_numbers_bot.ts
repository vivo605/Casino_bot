import { Telegraf, Markup, Context } from 'telegraf'
import { message } from 'telegraf/filters'
import { randomInt } from 'node:crypto' // min <= n < max
import dotenv from 'dotenv'

dotenv.config()

const { BOT_TOKEN } = process.env

if (!BOT_TOKEN) {
  throw '–î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ .env'
}

const userNumber: { [key: string]: number } = {}

const bot = new Telegraf(BOT_TOKEN)

bot.start((ctx) => ctx.reply('Welcome'))
bot.help((ctx) => ctx.reply('Send me a sticker'))

// /log
bot.command('log', () => {
  console.log(userNumber)
})

// RegExp: https://learn.javascript.ru/regular-expressions

bot.action(/^\d+$/, async (ctx) => {
  await ctx.answerCbQuery()
  const chatId = ctx.chat!.id
  const n = Number(ctx.match[0])
  await answer(ctx, chatId, n)
})

bot.on(message('text'), async (ctx) => {
  const chatId = ctx.chat.id
  // ctx.message.from.username

  if (!(chatId in userNumber)) {
    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${ctx.message.from.username}! –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å) `+
      `–ï—Å–ª–∏ –Ω–µ —É–≥–æ–¥–∞–µ—à—å —Ç–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å —á–∏–ª–æ–º)`
    )
    userNumber[chatId] = randomInt(1, 10 + 1)
  }
  
  const n = Number(ctx.message.text)
  await answer(ctx, chatId, n)
})

bot.launch(() => {
  console.log('Bot started üöÄ')
})

async function answer(ctx: Context, chatId: number, n: number) {
  if (!isFinite(n)){
    await ctx.reply('–¢—ã —á–∏—Ç–µ—Ä! –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10')
  }
  else if (n === userNumber[chatId]) {
    const randomNumber = randomInt(1, 10 + 1)
    userNumber[chatId] = randomNumber
    await ctx.reply('–¢—ã —É–≥–∞–¥–∞–ª')
  }
  else {
    await ctx.reply(
      n < userNumber[chatId]! ? '–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ.' : '–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ.', 
      Markup.inlineKeyboard([
        [Markup.button.callback(String(n+1), String(n+1))],
        [Markup.button.callback(String(n-1), String(n-1))],
      ])
    )
  }
}


// bot.action(/^red|black|yes|no$/, async (ctx) => {})
// const actions = [
//   'red',
//   'black',
//   'yes',
//   'no',
// ] as const